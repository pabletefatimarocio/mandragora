generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// AUTH

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  plants        Plant[]
  tags          Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// MANDRAGORA

model Plant {
  id                 String     @id @default(cuid())
  user_id            String
  name               String
  scientific         String?
  img                String
  img_width          Int
  img_height         Int
  watering           Int
  waterings          DateTime[] @default([])
  next_watering      DateTime?
  fertilization      Int
  fertilizations     DateTime[] @default([])
  next_fertilization DateTime?
  location_type      String?
  location_place     String?
  under_rain         Boolean    @default(false)
  user               User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tags               Tag[]
  notes              Note[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}

model Tag {
  id      String  @id @default(cuid())
  user_id String
  name    String
  color   String
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  plants  Plant[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}

model Note {
  id       String @id @default(cuid())
  plant_id String
  content  String
  plant    Plant  @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([plant_id])
}
